<?php
ini_set("allow_url_fopen", 1);
/**
 * Implements hook_theme().
 */
function nemac_leaflet_theme($existing, $type, $theme, $path) {
  return array(
    'nemac_leaflet_map' => array(
      'variables' => array(
        'map_id' => NULL,
        'height' => '400px',
        'map' => array(),
      ),
    ),
  );
}

/**
 * Load all Leaflet required client files and return markup for a map.
 *
 * @param array $map
 * @param array $features
 * @param string $height
 *
 * @return array render array
 */
function nemac_leaflet_render_map($map, $features = array(), $height = '400px') {
  $map_id = Drupal\Component\Utility\Html::getUniqueId('nemac_leaflet_map');

  $settings[$map_id] = array(
    'mapId' => $map_id,
    'map' => $map,
    // JS only works with arrays, make sure we have one with numeric keys.
    'features' => $features,
  );
  return array(
    '#theme' => 'nemac_leaflet_map',
    '#map_id' => $map_id,
    '#height' => $height,
    '#map' => $map,
    '#attached' => array(
      'library' => array('nemac_leaflet/nemac_leaflet-drupal'),
      'drupalSettings' => array(
        'nemac_leaflet' => $settings,
      ),
    ),
  );
}

/**
 * Get all available Leaflet map definitions.
 *
 * @param string $map
 */
function nemac_leaflet_map_get_info($map = NULL) {
  static $drupal_static_fast;
  if (!isset($drupal_static_fast)) {
    $drupal_static_fast['nemac_leaflet_map_info'] = &drupal_static(__FUNCTION__);
  }
  $map_info = &$drupal_static_fast['nemac_leaflet_map_info'];


  if (empty($map_info)) {
    if ($cached = Drupal::cache()->get('nemac_leaflet_map_info')) {
      $map_info = $cached->data;
    }
    else {
      $map_info = Drupal::moduleHandler()->invokeAll('nemac_leaflet_map_info');

      // Let other modules alter the map info.
      Drupal::moduleHandler()->alter('nemac_leaflet_map_info', $map_info);

      Drupal::cache()->set('nemac_leaflet_map_info', $map_info);
    }
  }

  if (empty($map)) {
    return $map_info;
  }
  elseif (isset($map_info[$map])) {
    return $map_info[$map];
  }
}

/**
 * Implements hook_nemac_leaflet_map_info() to return a default map.
 *
 * @return array
 */
function nemac_leaflet_nemac_leaflet_map_info() {
  return array(
    'Daveism MapBox' =>
      array(
        'label' => 'nemac_leaflet_map',
        'settings' => array(
          'dragging' => TRUE,
          'touchZoom' => TRUE,
          'scrollWheelZoom' => TRUE,
          'doubleClickZoom' => TRUE,
          'zoomControl' => TRUE,
          'attributionControl' => TRUE,
          'trackResize' => TRUE,
          'fadeAnimation' => TRUE,
          'zoomAnimation' => TRUE,
          'closePopupOnClick' => TRUE,
        ),
      ),
  );
}

/**
 * Convert a geofield into an array of map points.
 *
 * The map points can then be fed into nemac_leaflet_render_map().
 *
 * @param mixed $items
 *   a string value pointing to a uri location of GeoJSON data
 *
 * @return array
 */
function nemac_leaflet_process_geofield($items = array()) {

  $json = file_get_contents($items);
  $array = json_decode($json, true);

  $data = $array;

  return $data;

}

/**
 * Implements hook_requirements().
 */
function nemac_leaflet_requirements($phase) {
  $requirements = array();
  if ($phase != 'runtime') {
    return $requirements;
  }
  $library = Drupal::service('library.discovery')
    ->getLibraryByName('leaflet', 'leaflet');

  $requirements['leaflet'] = array(
    'title' => Drupal::translation()->translate('Leaflet library')
  );
  $maps_info = Drupal::translation()->translate('@maps available.', array(
      '@maps' => Drupal::translation()
        ->formatPlural(count(nemac_leaflet_map_get_info()), 'One map', '@count maps')
    )
  );

  // Check the defined type of the leaflet.js file; if it is external then
  // assume that we are using a CDN version.
  if ($library['js'][0]['type'] == 'external') {
    $requirements['leaflet']['value'] = Drupal::translation()
        ->translate('Using CDN version @version.', array(
          '@version' => $library['version']
        )) . ' ' . $maps_info;
  }
  // If leaflet.js is defined to be a local file, check that it exists and show
  // an error if it does not exist.
  else {
    if (file_exists($library['js'][0]['data'])) {
      $requirements['leaflet']['value'] = Drupal::translation()
          ->translate('Leaflet @version library installed at @path.', array(
            '@version' => $library['version'],
            '@path' => $library['js'][0]['data'],
          )) . ' ' . $maps_info;
      $requirements['leaflet']['severity'] = REQUIREMENT_OK;
    }
    else {
      $requirements['leaflet']['value'] = Drupal::translation()
        ->translate('Leaflet @version library not found at @path. Please !download it to @directory, or undo your changes to the libraries registry to use the CDN version.',
          array(
            '@version' => $library['version'],
            '@path' => $library['js'][0]['data'],
            '@directory' => dirname($library['js'][0]['data']),
            '!download' => Drupal::l('download', Drupal\Core\Url::fromUri($library['remote'])),
          )
        );
      $requirements['leaflet']['severity'] = REQUIREMENT_ERROR;
    }
  }

  return $requirements;
}
